"use strict";
var _createClass = (function() {
  function a(e, t) {
    for (var n = 0; n < t.length; n++) {
      var a = t[n];
      (a.enumerable = a.enumerable || !1),
        (a.configurable = !0),
        "value" in a && (a.writable = !0),
        Object.defineProperty(e, a.key, a);
    }
  }
  return function(e, t, n) {
    return t && a(e.prototype, t), n && a(e, n), e;
  };
})();
function _classCallCheck(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
var offlineMessage = document.getElementById("offline"),
  noDataMessage = document.getElementById("no-data"),
  dataSavedMessage = document.getElementById("data-saved"),
  saveErrorMessage = document.getElementById("save-error"),
  DBHelper = (function() {
    function n() {
      _classCallCheck(this, n);
    }
    return (
      _createClass(n, null, [
        {
          key: "getAlternativeText",
          value: function(e) {
            return {
              1: "Interior of Mission Chinese Food",
              2: "Pizza Quattro Formaggi",
              3: "Interior of Kang Ho Dong Baekjeong",
              4: "Outside view of Katz's Delicatessen at night",
              5: "Open kitchen of Roberta's Pizza",
              6: "People queueing at Hometown BBQ",
              7: "Outside view of Superiority Burger",
              8: "Outside view of The Dutch",
              9: "People eating at Mu Ramen",
              10: "Interior of Casa Enrique"
            }[e];
          }
        },
        {
          key: "messageOffline",
          value: function() {
            var e = this.getLastUpdated();
            e &&
              (offlineMessage.textContent += " Last fetched server data: " + e),
              (offlineMessage.style.display = "block");
          }
        },
        {
          key: "messageNoData",
          value: function() {
            noDataMessage.style.display = "block";
          }
        },
        {
          key: "messageDataSaved",
          value: function() {
            var e = this.getLastUpdated();
            e && (dataSavedMessage.textContent += " on " + e),
              (dataSavedMessage.style.display = "block");
          }
        },
        {
          key: "messageSaveError",
          value: function() {
            saveErrorMessage.style.display = "block";
          }
        },
        {
          key: "getLastUpdated",
          value: function() {
            return localStorage.getItem("lastUpdated");
          }
        },
        {
          key: "setLastUpdated",
          value: function(e) {
            localStorage.setItem("lastUpdated", e);
          }
        },
        {
          key: "logResult",
          value: function(e) {
            console.log(e);
          }
        },
        {
          key: "logError",
          value: function(e) {
            console.log("[ERROR] Looks like there was a problem: \n", e);
          }
        },
        {
          key: "validateResponse",
          value: function(e) {
            if (!e.ok) throw Error(e.statusText);
            return e;
          }
        },
        {
          key: "readResponseAsJSON",
          value: function(e) {
            return e.json();
          }
        },
        {
          key: "readResponseAsText",
          value: function(e) {
            return e.text();
          }
        },
        {
          key: "getServerData",
          value: function(e) {
            return fetch(e)
              .then(this.validateResponse)
              .then(this.readResponseAsJSON);
          }
        },
        {
          key: "postRequest",
          value: function(e, t) {
            var n = new Headers({ "Content-Type": "application/json" }),
              a = JSON.stringify(t);
            return fetch(e, { method: "POST", headers: n, body: a })
              .then(this.validateResponse)
              .then(this.readResponseAsText);
          }
        },
        {
          key: "getRestaurantURL",
          value: function(e) {
            return "restaurant.html?id=" + e.id;
          }
        },
        {
          key: "getImageUrlForRestaurant",
          value: function(e, t, n) {
            var a = "jpg";
            switch (t) {
              case "jpeg":
                break;
              case "webp":
                a = "webp";
                break;
              default:
                console.log("[DEBUG] unhandled imageType: " + t);
            }
            return void 0 !== n
              ? "img/" + e.id + "_w_" + n + "." + a
              : "img/" + e.id + "_w_800." + a;
          }
        },
        {
          key: "addMarkerForRestaurant",
          value: function(e, t) {
            return new google.maps.Marker({
              position: e.latlng,
              title: e.name,
              url: n.getRestaurantURL(e),
              map: t,
              animation: google.maps.Animation.DROP
            });
          }
        },
        {
          key: "DATABASE_URL",
          get: function() {
            return "http://localhost:1337";
          }
        }
      ]),
      n
    );
  })(),
  _get = function e(t, n, a) {
    null === t && (t = Function.prototype);
    var r = Object.getOwnPropertyDescriptor(t, n);
    if (void 0 === r) {
      var i = Object.getPrototypeOf(t);
      return null === i ? void 0 : e(i, n, a);
    }
    if ("value" in r) return r.value;
    var o = r.get;
    return void 0 !== o ? o.call(a) : void 0;
  };
_createClass = (function() {
  function a(e, t) {
    for (var n = 0; n < t.length; n++) {
      var a = t[n];
      (a.enumerable = a.enumerable || !1),
        (a.configurable = !0),
        "value" in a && (a.writable = !0),
        Object.defineProperty(e, a.key, a);
    }
  }
  return function(e, t, n) {
    return t && a(e.prototype, t), n && a(e, n), e;
  };
})();
function _possibleConstructorReturn(e, t) {
  if (!e)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    );
  return !t || ("object" != typeof t && "function" != typeof t) ? e : t;
}
function _inherits(e, t) {
  if ("function" != typeof t && null !== t)
    throw new TypeError(
      "Super expression must either be null or a function, not " + typeof t
    );
  (e.prototype = Object.create(t && t.prototype, {
    constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 }
  })),
    t &&
      (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : (e.__proto__ = t));
}
function _classCallCheck(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
!(function(n) {
  var a = {};
  function r(e) {
    if (a[e]) return a[e].exports;
    var t = (a[e] = { i: e, l: !1, exports: {} });
    return n[e].call(t.exports, t, t.exports, r), (t.l = !0), t.exports;
  }
  (r.m = n),
    (r.c = a),
    (r.d = function(e, t, n) {
      r.o(e, t) ||
        Object.defineProperty(e, t, {
          configurable: !1,
          enumerable: !0,
          get: n
        });
    }),
    (r.n = function(e) {
      var t =
        e && e.__esModule
          ? function() {
              return e.default;
            }
          : function() {
              return e;
            };
      return r.d(t, "a", t), t;
    }),
    (r.o = function(e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }),
    (r.p = ""),
    r((r.s = 5));
})([
  function(e, t, n) {
    var a = (function() {
      function t() {
        var e =
          0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
        _classCallCheck(this, t), (this.adapter_ = e);
      }
      return (
        _createClass(t, null, [
          {
            key: "cssClasses",
            get: function() {
              return {};
            }
          },
          {
            key: "strings",
            get: function() {
              return {};
            }
          },
          {
            key: "numbers",
            get: function() {
              return {};
            }
          },
          {
            key: "defaultAdapter",
            get: function() {
              return {};
            }
          }
        ]),
        _createClass(t, [
          { key: "init", value: function() {} },
          { key: "destroy", value: function() {} }
        ]),
        t
      );
    })();
    t.a = a;
  },
  function(e, t, n) {
    n.d(t, "a", function() {
      return i;
    });
    var a = n(2),
      r = (n(3), n(6)),
      o = n(4),
      i = (function(e) {
        function i() {
          var e;
          _classCallCheck(this, i);
          for (var t = arguments.length, n = Array(t), a = 0; a < t; a++)
            n[a] = arguments[a];
          var r = _possibleConstructorReturn(
            this,
            (e = i.__proto__ || Object.getPrototypeOf(i)).call.apply(
              e,
              [this].concat(n)
            )
          );
          return (r.disabled = !1), r.unbounded_, r;
        }
        return (
          _inherits(i, a["a"]),
          _createClass(
            i,
            [
              {
                key: "setUnbounded_",
                value: function() {
                  this.foundation_.setUnbounded(this.unbounded_);
                }
              },
              {
                key: "activate",
                value: function() {
                  this.foundation_.activate();
                }
              },
              {
                key: "deactivate",
                value: function() {
                  this.foundation_.deactivate();
                }
              },
              {
                key: "layout",
                value: function() {
                  this.foundation_.layout();
                }
              },
              {
                key: "getDefaultFoundation",
                value: function() {
                  return new r.a(i.createAdapter(this));
                }
              },
              {
                key: "initialSyncWithDOM",
                value: function() {
                  this.unbounded = "mdcRippleIsUnbounded" in this.root_.dataset;
                }
              },
              {
                key: "unbounded",
                get: function() {
                  return this.unbounded_;
                },
                set: function(e) {
                  (this.unbounded_ = Boolean(e)), this.setUnbounded_();
                }
              }
            ],
            [
              {
                key: "attachTo",
                value: function(e) {
                  var t = (1 < arguments.length && void 0 !== arguments[1]
                      ? arguments[1]
                      : {}
                    ).isUnbounded,
                    n = void 0 === t ? void 0 : t,
                    a = new i(e);
                  return void 0 !== n && (a.unbounded = n), a;
                }
              },
              {
                key: "createAdapter",
                value: function(n) {
                  var e = o.b(HTMLElement.prototype);
                  return {
                    browserSupportsCssVars: function() {
                      return o.d(window);
                    },
                    isUnbounded: function() {
                      return n.unbounded;
                    },
                    isSurfaceActive: function() {
                      return n.root_[e](":active");
                    },
                    isSurfaceDisabled: function() {
                      return n.disabled;
                    },
                    addClass: function(e) {
                      return n.root_.classList.add(e);
                    },
                    removeClass: function(e) {
                      return n.root_.classList.remove(e);
                    },
                    containsEventTarget: function(e) {
                      return n.root_.contains(e);
                    },
                    registerInteractionHandler: function(e, t) {
                      return n.root_.addEventListener(e, t, o.a());
                    },
                    deregisterInteractionHandler: function(e, t) {
                      return n.root_.removeEventListener(e, t, o.a());
                    },
                    registerDocumentInteractionHandler: function(e, t) {
                      return document.documentElement.addEventListener(
                        e,
                        t,
                        o.a()
                      );
                    },
                    deregisterDocumentInteractionHandler: function(e, t) {
                      return document.documentElement.removeEventListener(
                        e,
                        t,
                        o.a()
                      );
                    },
                    registerResizeHandler: function(e) {
                      return window.addEventListener("resize", e);
                    },
                    deregisterResizeHandler: function(e) {
                      return window.removeEventListener("resize", e);
                    },
                    updateCssVariable: function(e, t) {
                      return n.root_.style.setProperty(e, t);
                    },
                    computeBoundingRect: function() {
                      return n.root_.getBoundingClientRect();
                    },
                    getWindowPageOffset: function() {
                      return { x: window.pageXOffset, y: window.pageYOffset };
                    }
                  };
                }
              }
            ]
          ),
          i
        );
      })();
  },
  function(e, t, n) {
    var a = n(0),
      r = (function() {
        function i(e) {
          var t =
            1 < arguments.length && void 0 !== arguments[1]
              ? arguments[1]
              : void 0;
          _classCallCheck(this, i), (this.root_ = e);
          for (
            var n = arguments.length, a = Array(2 < n ? n - 2 : 0), r = 2;
            r < n;
            r++
          )
            a[r - 2] = arguments[r];
          this.initialize.apply(this, a),
            (this.foundation_ = void 0 === t ? this.getDefaultFoundation() : t),
            this.foundation_.init(),
            this.initialSyncWithDOM();
        }
        return (
          _createClass(i, null, [
            {
              key: "attachTo",
              value: function(e) {
                return new i(e, new a.a());
              }
            }
          ]),
          _createClass(i, [
            { key: "initialize", value: function() {} },
            {
              key: "getDefaultFoundation",
              value: function() {
                throw new Error(
                  "Subclasses must override getDefaultFoundation to return a properly configured foundation class"
                );
              }
            },
            { key: "initialSyncWithDOM", value: function() {} },
            {
              key: "destroy",
              value: function() {
                this.foundation_.destroy();
              }
            },
            {
              key: "listen",
              value: function(e, t) {
                this.root_.addEventListener(e, t);
              }
            },
            {
              key: "unlisten",
              value: function(e, t) {
                this.root_.removeEventListener(e, t);
              }
            },
            {
              key: "emit",
              value: function(e, t) {
                var n =
                    2 < arguments.length &&
                    void 0 !== arguments[2] &&
                    arguments[2],
                  a = void 0;
                "function" == typeof CustomEvent
                  ? (a = new CustomEvent(e, { detail: t, bubbles: n }))
                  : (a = document.createEvent("CustomEvent")).initCustomEvent(
                      e,
                      n,
                      !1,
                      t
                    ),
                  this.root_.dispatchEvent(a);
              }
            }
          ]),
          i
        );
      })();
    t.a = r;
  },
  function(e, t, n) {
    !(function() {
      function e() {
        _classCallCheck(this, e);
      }
      _createClass(e, [
        { key: "browserSupportsCssVars", value: function() {} },
        { key: "isUnbounded", value: function() {} },
        { key: "isSurfaceActive", value: function() {} },
        { key: "isSurfaceDisabled", value: function() {} },
        { key: "addClass", value: function(e) {} },
        { key: "removeClass", value: function(e) {} },
        { key: "containsEventTarget", value: function(e) {} },
        { key: "registerInteractionHandler", value: function(e, t) {} },
        { key: "deregisterInteractionHandler", value: function(e, t) {} },
        { key: "registerDocumentInteractionHandler", value: function(e, t) {} },
        {
          key: "deregisterDocumentInteractionHandler",
          value: function(e, t) {}
        },
        { key: "registerResizeHandler", value: function(e) {} },
        { key: "deregisterResizeHandler", value: function(e) {} },
        { key: "updateCssVariable", value: function(e, t) {} },
        { key: "computeBoundingRect", value: function() {} },
        { key: "getWindowPageOffset", value: function() {} }
      ]);
    })();
  },
  function(e, t, n) {
    n.d(t, "d", function() {
      return r;
    }),
      n.d(t, "a", function() {
        return o;
      }),
      n.d(t, "b", function() {
        return s;
      }),
      n.d(t, "c", function() {
        return u;
      });
    var i = void 0,
      a = void 0;
    function r(e) {
      var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
        n = i;
      if ("boolean" == typeof i && !t) return n;
      if (e.CSS && "function" == typeof e.CSS.supports) {
        var a = e.CSS.supports("--css-vars", "yes"),
          r =
            e.CSS.supports("(--css-vars: yes)") &&
            e.CSS.supports("color", "#00000000");
        return (
          (n =
            !(!a && !r) &&
            !(function(e) {
              var t = e.document,
                n = t.createElement("div");
              (n.className = "mdc-ripple-surface--test-edge-var-bug"),
                t.body.appendChild(n);
              var a = e.getComputedStyle(n),
                r = null !== a && "solid" === a.borderTopStyle;
              return n.remove(), r;
            })(e)),
          t || (i = n),
          n
        );
      }
    }
    function o() {
      var e =
          0 < arguments.length && void 0 !== arguments[0]
            ? arguments[0]
            : window,
        t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
      if (void 0 === a || t) {
        var n = !1;
        try {
          e.document.addEventListener("test", null, {
            get passive() {
              n = !0;
            }
          });
        } catch (e) {}
        a = n;
      }
      return !!a && { passive: !0 };
    }
    function s(t) {
      return ["webkitMatchesSelector", "msMatchesSelector", "matches"]
        .filter(function(e) {
          return e in t;
        })
        .pop();
    }
    function u(e, t, n) {
      var a = t.x,
        r = t.y,
        i = a + n.left,
        o = r + n.top,
        s = void 0,
        u = void 0;
      return (
        "touchstart" === e.type
          ? ((s = e.changedTouches[0].pageX - i),
            (u = e.changedTouches[0].pageY - o))
          : ((s = e.pageX - i), (u = e.pageY - o)),
        { x: s, y: u }
      );
    }
  },
  function(e, t, n) {
    Object.defineProperty(t, "__esModule", { value: !0 });
    var a = n(1),
      r = n(8),
      i = void 0,
      o = !1,
      s = document.getElementById("breadcrumb"),
      u = document.getElementById("card-primary"),
      c = document.getElementById("restaurant-name"),
      l = document.getElementById("restaurant-address"),
      d = document.getElementById("add-to-favorites"),
      f = document.getElementById("restaurant-cuisine"),
      v = document.getElementById("restaurant-hours"),
      _ = document.getElementById("review-link"),
      p = document.getElementById("maps-container"),
      h = document.getElementById("google-maps"),
      g = document.getElementById("google-static-maps"),
      m = document.getElementById("reviews-container"),
      y = document.getElementById("reviews-list");
    new a.a(document.querySelector(".mdc-icon-button")).unbounded = !0;
    var A = new r.a(d);
    d.addEventListener("MDCIconButtonToggle:change", function(e) {
      (o = !!e.detail.isOn), C(self.restaurant_id, o);
    });
    var C = function(e, t) {
      var n = "http://localhost:1337/restaurants/" + e + "/?is_favorite=" + t;
      DBHelper.postRequest(n)
        .then(function(e) {
          console.log("[DEBUG] POST is_favorite=" + t);
        })
        .catch(function(e) {
          console.log(
            "[DEBUG] Network requests have failed, this is expected if offline"
          );
        });
    };
    document.addEventListener("DOMContentLoaded", function(e) {
      b(), (self.restaurant_id = S("id")), E(self.restaurant_id);
    });
    var b = function() {
      var e = "",
        t = 640,
        n = 640,
        a = 1,
        r = new Image();
      (r.id = "static-map"),
        (r.className = "google-maps-static-img"),
        r.setAttribute("onclick", "showGoogleMaps()"),
        (r.alt =
          "Static map showing high level view of New York, Manhattan and Brooklyn");
      var i = p.clientWidth;
      i <= 640 ? (t = i) : ((a = 2), (t = 640));
      var o = p.clientHeight;
      o <= 640 ? (n = o) : ((a = 2), (n = 640)),
        (e = "img/staticmap.jpg"),
        (r.src = e),
        (r.width = t),
        (r.height = n),
        g.appendChild(r);
    };
    (window.showGoogleMaps = function() {
      "none" === h.style.display &&
        ((h.style.display = "block"), (g.style.display = "none"));
    }),
      Notification.requestPermission(function(e) {
        console.log("[DEBUG] Notification permission status:", e);
      });
    var E = function(t) {
        var e = "http://localhost:1337/restaurants/" + t;
        DBHelper.getServerData(e)
          .then(function(e) {
            (self.restaurant = e),
              "true" === self.restaurant.is_favorite && ((o = !0), (A.on = !0)),
              T(t),
              O(),
              saveRestaurantsDataLocally(e)
                .then(function() {
                  DBHelper.setLastUpdated(new Date());
                })
                .catch(function(e) {
                  console.warn(e);
                }),
              k();
          })
          .catch(function(e) {
            console.log(
              "[DEBUG] Network requests have failed, this is expected if offline"
            ),
              getLocalRestaurantByIdData(t)
                .then(function(e) {
                  (self.restaurant = e),
                    "true" === self.restaurant.is_favorite &&
                      ((o = !0), (A.on = !0)),
                    T(t),
                    O();
                })
                .catch(function(e) {
                  console.warn(e);
                });
          });
      },
      k = function() {
        (i = new google.maps.Map(h, {
          center: { lat: 40.722216, lng: -73.987501 },
          zoom: 12
        })),
          DBHelper.addMarkerForRestaurant(self.restaurant, i);
        i.addListener("tilesloaded", function() {
          document
            .querySelector("#google-maps iframe")
            .setAttribute("title", "Google Maps overview of restaurants");
        });
      },
      T = function(e) {
        var t,
          n,
          a = R(self.restaurant);
        u.parentNode.insertBefore(a, u),
          (c.innerHTML = self.restaurant.name),
          (c.tabIndex = "0"),
          (l.innerHTML = self.restaurant.address),
          (f.innerHTML = self.restaurant.cuisine_type),
          self.restaurant.operating_hours && w(),
          _.setAttribute("href", "review.html?id=" + e),
          (t = self.restaurant.id),
          (n = "http://localhost:1337/reviews/?restaurant_id=" + t),
          DBHelper.getServerData(n)
            .then(function(e) {
              D(e),
                saveReviewsDataLocally(e)
                  .then(function() {
                    DBHelper.setLastUpdated(new Date());
                  })
                  .catch(function(e) {
                    console.warn(e);
                  });
            })
            .catch(function(e) {
              console.log(
                "[DEBUG] Network requests have failed, this is expected if offline"
              ),
                getLocalReviewsByIdData(t)
                  .then(function(e) {
                    D(e);
                  })
                  .catch(function(e) {
                    console.warn(e);
                  });
            });
      },
      w = function() {
        var e = self.restaurant.operating_hours;
        for (var t in e) {
          var n = document.createElement("tr");
          (n.className = "restaurant-card-table-content"), (n.tabIndex = "0");
          var a = document.createElement("td");
          (a.innerHTML = t), n.appendChild(a);
          var r = document.createElement("td");
          (r.innerHTML = e[t]), n.appendChild(r), v.appendChild(n);
        }
      },
      D = function(e) {
        var t = document.createElement("h3");
        if (
          ((t.className = "reviews-title"),
          (t.innerHTML = "Reviews"),
          m.appendChild(t),
          !e)
        ) {
          var n = document.createElement("p");
          return (n.innerHTML = "No reviews yet!"), void m.appendChild(n);
        }
        e.forEach(function(e) {
          y.appendChild(I(e));
        }),
          m.appendChild(y);
      },
      I = function(e) {
        var t = document.createElement("li");
        t.className = "review-card";
        var n = document.createElement("div");
        n.className = "card-primary";
        var a = document.createElement("h2");
        (a.className = "card-title"), (a.innerHTML = e.name), n.appendChild(a);
        var r = document.createElement("h3");
        r.className = "card-subtitle";
        var i = new Date(e.createdAt);
        (r.innerHTML = i.toDateString()), n.appendChild(r), t.appendChild(n);
        var o = document.createElement("div");
        o.className = "review-card-rating";
        var s = document.createElement("p");
        (s.className = "review-card-rating-content"),
          (s.innerHTML = "Rating: " + e.rating),
          o.append(s),
          t.appendChild(o);
        var u = document.createElement("div");
        u.className = "card-secondary";
        var c = document.createElement("p");
        return (
          (c.className = "card-secondary-content"),
          (c.innerHTML = e.comments),
          u.appendChild(c),
          t.appendChild(u),
          t
        );
      },
      O = function() {
        var e =
            0 < arguments.length && void 0 !== arguments[0]
              ? arguments[0]
              : self.restaurant,
          t = document.createElement("li");
        (t.className = "breadcrumb"),
          (t.innerHTML = e.name),
          t.setAttribute("aria-current", "page"),
          s.appendChild(t);
      },
      S = function(e, t) {
        t || (t = window.location.href), (e = e.replace(/[\[\]]/g, "\\$&"));
        var n = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)").exec(t);
        return n
          ? n[2]
            ? decodeURIComponent(n[2].replace(/\+/g, " "))
            : ""
          : null;
      },
      R = function(e) {
        var t = document.createElement("picture"),
          n = "(max-width: 37.4375rem) 100vw, (min-width: 37.5rem) 50vw, 100vw",
          a =
            DBHelper.getImageUrlForRestaurant(e, "webp", 300) +
            " 300w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "webp", 433) +
            " 433w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "webp", 552) +
            " 552w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "webp", 653) +
            " 653w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "webp", 752) +
            " 752w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "webp", 800) +
            " 800w",
          r =
            DBHelper.getImageUrlForRestaurant(e, "jpeg", 300) +
            " 300w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "jpeg", 433) +
            " 433w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "jpeg", 552) +
            " 552w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "jpeg", 653) +
            " 653w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "jpeg", 752) +
            " 752w,\n    " +
            DBHelper.getImageUrlForRestaurant(e, "jpeg", 800) +
            " 800w",
          i = document.createElement("source");
        (i.srcset = a),
          (i.sizes = n),
          (i.type = "image/webp"),
          t.appendChild(i);
        var o = document.createElement("source");
        (o.srcset = r),
          (o.sizes = n),
          (o.type = "image/jpeg"),
          t.appendChild(o);
        var s = document.createElement("img"),
          u = DBHelper.getImageUrlForRestaurant(e, "jpeg", 800);
        s.src = u;
        var c = DBHelper.getAlternativeText(e.id);
        return (
          c || (c = "Restaurant " + e.name),
          (s.alt = c),
          (s.tabIndex = "0"),
          t.appendChild(s),
          t
        );
      };
  },
  function(e, t, n) {
    var a = n(0),
      i = (n(3), n(7)),
      r = n(4),
      o = ["touchstart", "pointerdown", "mousedown", "keydown"],
      s = ["touchend", "pointerup", "mouseup"],
      u = [],
      c = (function(e) {
        function v(e) {
          _classCallCheck(this, v);
          var t = _possibleConstructorReturn(
            this,
            (v.__proto__ || Object.getPrototypeOf(v)).call(
              this,
              Object.assign(v.defaultAdapter, e)
            )
          );
          return (
            (t.layoutFrame_ = 0),
            (t.frame_ = { width: 0, height: 0 }),
            (t.activationState_ = t.defaultActivationState_()),
            (t.initialSize_ = 0),
            (t.maxRadius_ = 0),
            (t.activateHandler_ = function(e) {
              return t.activate_(e);
            }),
            (t.deactivateHandler_ = function(e) {
              return t.deactivate_(e);
            }),
            (t.focusHandler_ = function() {
              return requestAnimationFrame(function() {
                return t.adapter_.addClass(v.cssClasses.BG_FOCUSED);
              });
            }),
            (t.blurHandler_ = function() {
              return requestAnimationFrame(function() {
                return t.adapter_.removeClass(v.cssClasses.BG_FOCUSED);
              });
            }),
            (t.resizeHandler_ = function() {
              return t.layout();
            }),
            (t.unboundedCoords_ = { left: 0, top: 0 }),
            (t.fgScale_ = 0),
            (t.activationTimer_ = 0),
            (t.fgDeactivationRemovalTimer_ = 0),
            (t.activationAnimationHasEnded_ = !1),
            (t.activationTimerCallback_ = function() {
              (t.activationAnimationHasEnded_ = !0),
                t.runDeactivationUXLogicIfReady_();
            }),
            (t.previousActivationEvent_ = null),
            t
          );
        }
        return (
          _inherits(v, a["a"]),
          _createClass(v, null, [
            {
              key: "cssClasses",
              get: function() {
                return i.a;
              }
            },
            {
              key: "strings",
              get: function() {
                return i.c;
              }
            },
            {
              key: "numbers",
              get: function() {
                return i.b;
              }
            },
            {
              key: "defaultAdapter",
              get: function() {
                return {
                  browserSupportsCssVars: function() {},
                  isUnbounded: function() {},
                  isSurfaceActive: function() {},
                  isSurfaceDisabled: function() {},
                  addClass: function() {},
                  removeClass: function() {},
                  containsEventTarget: function() {},
                  registerInteractionHandler: function() {},
                  deregisterInteractionHandler: function() {},
                  registerDocumentInteractionHandler: function() {},
                  deregisterDocumentInteractionHandler: function() {},
                  registerResizeHandler: function() {},
                  deregisterResizeHandler: function() {},
                  updateCssVariable: function() {},
                  computeBoundingRect: function() {},
                  getWindowPageOffset: function() {}
                };
              }
            }
          ]),
          _createClass(v, [
            {
              key: "isSupported_",
              value: function() {
                return this.adapter_.browserSupportsCssVars();
              }
            },
            {
              key: "defaultActivationState_",
              value: function() {
                return {
                  isActivated: !1,
                  hasDeactivationUXRun: !1,
                  wasActivatedByPointer: !1,
                  wasElementMadeActive: !1,
                  activationEvent: null,
                  isProgrammatic: !1
                };
              }
            },
            {
              key: "init",
              value: function() {
                var e = this;
                if (this.isSupported_()) {
                  this.registerRootHandlers_();
                  var t = v.cssClasses,
                    n = t.ROOT,
                    a = t.UNBOUNDED;
                  requestAnimationFrame(function() {
                    e.adapter_.addClass(n),
                      e.adapter_.isUnbounded() &&
                        (e.adapter_.addClass(a), e.layoutInternal_());
                  });
                }
              }
            },
            {
              key: "destroy",
              value: function() {
                var e = this;
                if (this.isSupported_()) {
                  if (this.activationTimer_) {
                    clearTimeout(this.activationTimer_),
                      (this.activationTimer_ = 0);
                    var t = v.cssClasses.FG_ACTIVATION;
                    this.adapter_.removeClass(t);
                  }
                  this.deregisterRootHandlers_(),
                    this.deregisterDeactivationHandlers_();
                  var n = v.cssClasses,
                    a = n.ROOT,
                    r = n.UNBOUNDED;
                  requestAnimationFrame(function() {
                    e.adapter_.removeClass(a),
                      e.adapter_.removeClass(r),
                      e.removeCssVars_();
                  });
                }
              }
            },
            {
              key: "registerRootHandlers_",
              value: function() {
                var t = this;
                o.forEach(function(e) {
                  t.adapter_.registerInteractionHandler(e, t.activateHandler_);
                }),
                  this.adapter_.registerInteractionHandler(
                    "focus",
                    this.focusHandler_
                  ),
                  this.adapter_.registerInteractionHandler(
                    "blur",
                    this.blurHandler_
                  ),
                  this.adapter_.isUnbounded() &&
                    this.adapter_.registerResizeHandler(this.resizeHandler_);
              }
            },
            {
              key: "registerDeactivationHandlers_",
              value: function(e) {
                var t = this;
                "keydown" === e.type
                  ? this.adapter_.registerInteractionHandler(
                      "keyup",
                      this.deactivateHandler_
                    )
                  : s.forEach(function(e) {
                      t.adapter_.registerDocumentInteractionHandler(
                        e,
                        t.deactivateHandler_
                      );
                    });
              }
            },
            {
              key: "deregisterRootHandlers_",
              value: function() {
                var t = this;
                o.forEach(function(e) {
                  t.adapter_.deregisterInteractionHandler(
                    e,
                    t.activateHandler_
                  );
                }),
                  this.adapter_.deregisterInteractionHandler(
                    "focus",
                    this.focusHandler_
                  ),
                  this.adapter_.deregisterInteractionHandler(
                    "blur",
                    this.blurHandler_
                  ),
                  this.adapter_.isUnbounded() &&
                    this.adapter_.deregisterResizeHandler(this.resizeHandler_);
              }
            },
            {
              key: "deregisterDeactivationHandlers_",
              value: function() {
                var t = this;
                this.adapter_.deregisterInteractionHandler(
                  "keyup",
                  this.deactivateHandler_
                ),
                  s.forEach(function(e) {
                    t.adapter_.deregisterDocumentInteractionHandler(
                      e,
                      t.deactivateHandler_
                    );
                  });
              }
            },
            {
              key: "removeCssVars_",
              value: function() {
                var t = this,
                  n = v.strings;
                Object.keys(n).forEach(function(e) {
                  0 === e.indexOf("VAR_") &&
                    t.adapter_.updateCssVariable(n[e], null);
                });
              }
            },
            {
              key: "activate_",
              value: function(e) {
                var t = this;
                if (!this.adapter_.isSurfaceDisabled()) {
                  var n = this.activationState_;
                  if (!n.isActivated) {
                    var a = this.previousActivationEvent_;
                    if (!(a && e && a.type !== e.type))
                      (n.isActivated = !0),
                        (n.isProgrammatic = null === e),
                        (n.activationEvent = e),
                        (n.wasActivatedByPointer =
                          !n.isProgrammatic &&
                          ("mousedown" === e.type ||
                            "touchstart" === e.type ||
                            "pointerdown" === e.type)),
                        e &&
                        0 < u.length &&
                        u.some(function(e) {
                          return t.adapter_.containsEventTarget(e);
                        })
                          ? this.resetActivationState_()
                          : (e &&
                              (u.push(e.target),
                              this.registerDeactivationHandlers_(e)),
                            (n.wasElementMadeActive = this.checkElementMadeActive_(
                              e
                            )),
                            n.wasElementMadeActive && this.animateActivation_(),
                            requestAnimationFrame(function() {
                              (u = []),
                                n.wasElementMadeActive ||
                                  (" " !== e.key && 32 !== e.keyCode) ||
                                  ((n.wasElementMadeActive = t.checkElementMadeActive_(
                                    e
                                  )),
                                  n.wasElementMadeActive &&
                                    t.animateActivation_()),
                                n.wasElementMadeActive ||
                                  (t.activationState_ = t.defaultActivationState_());
                            }));
                  }
                }
              }
            },
            {
              key: "checkElementMadeActive_",
              value: function(e) {
                return (
                  !e || "keydown" !== e.type || this.adapter_.isSurfaceActive()
                );
              }
            },
            {
              key: "activate",
              value: function() {
                var e =
                  0 < arguments.length && void 0 !== arguments[0]
                    ? arguments[0]
                    : null;
                this.activate_(e);
              }
            },
            {
              key: "animateActivation_",
              value: function() {
                var e = this,
                  t = v.strings,
                  n = t.VAR_FG_TRANSLATE_START,
                  a = t.VAR_FG_TRANSLATE_END,
                  r = v.cssClasses,
                  i = r.FG_DEACTIVATION,
                  o = r.FG_ACTIVATION,
                  s = v.numbers.DEACTIVATION_TIMEOUT_MS;
                this.layoutInternal_();
                var u = "",
                  c = "";
                if (!this.adapter_.isUnbounded()) {
                  var l = this.getFgTranslationCoordinates_(),
                    d = l.startPoint,
                    f = l.endPoint;
                  (u = d.x + "px, " + d.y + "px"),
                    (c = f.x + "px, " + f.y + "px");
                }
                this.adapter_.updateCssVariable(n, u),
                  this.adapter_.updateCssVariable(a, c),
                  clearTimeout(this.activationTimer_),
                  clearTimeout(this.fgDeactivationRemovalTimer_),
                  this.rmBoundedActivationClasses_(),
                  this.adapter_.removeClass(i),
                  this.adapter_.computeBoundingRect(),
                  this.adapter_.addClass(o),
                  (this.activationTimer_ = setTimeout(function() {
                    return e.activationTimerCallback_();
                  }, s));
              }
            },
            {
              key: "getFgTranslationCoordinates_",
              value: function() {
                var e = this.activationState_,
                  t = e.activationEvent,
                  n = void 0;
                return {
                  startPoint: (n = {
                    x:
                      (n = e.wasActivatedByPointer
                        ? Object(r.c)(
                            t,
                            this.adapter_.getWindowPageOffset(),
                            this.adapter_.computeBoundingRect()
                          )
                        : {
                            x: this.frame_.width / 2,
                            y: this.frame_.height / 2
                          }).x -
                      this.initialSize_ / 2,
                    y: n.y - this.initialSize_ / 2
                  }),
                  endPoint: {
                    x: this.frame_.width / 2 - this.initialSize_ / 2,
                    y: this.frame_.height / 2 - this.initialSize_ / 2
                  }
                };
              }
            },
            {
              key: "runDeactivationUXLogicIfReady_",
              value: function() {
                var e = this,
                  t = v.cssClasses.FG_DEACTIVATION,
                  n = this.activationState_,
                  a = n.hasDeactivationUXRun,
                  r = n.isActivated;
                (a || !r) &&
                  this.activationAnimationHasEnded_ &&
                  (this.rmBoundedActivationClasses_(),
                  this.adapter_.addClass(t),
                  (this.fgDeactivationRemovalTimer_ = setTimeout(function() {
                    e.adapter_.removeClass(t);
                  }, i.b.FG_DEACTIVATION_MS)));
              }
            },
            {
              key: "rmBoundedActivationClasses_",
              value: function() {
                var e = v.cssClasses.FG_ACTIVATION;
                this.adapter_.removeClass(e),
                  (this.activationAnimationHasEnded_ = !1),
                  this.adapter_.computeBoundingRect();
              }
            },
            {
              key: "resetActivationState_",
              value: function() {
                var e = this;
                (this.previousActivationEvent_ = this.activationState_.activationEvent),
                  (this.activationState_ = this.defaultActivationState_()),
                  setTimeout(function() {
                    return (e.previousActivationEvent_ = null);
                  }, v.numbers.TAP_DELAY_MS);
              }
            },
            {
              key: "deactivate_",
              value: function(e) {
                var t = this,
                  n = this.activationState_;
                if (n.isActivated) {
                  var a = Object.assign({}, n);
                  if (n.isProgrammatic) {
                    requestAnimationFrame(function() {
                      return t.animateDeactivation_(null, a);
                    }),
                      this.resetActivationState_();
                  } else
                    this.deregisterDeactivationHandlers_(),
                      requestAnimationFrame(function() {
                        (t.activationState_.hasDeactivationUXRun = !0),
                          t.animateDeactivation_(e, a),
                          t.resetActivationState_();
                      });
                }
              }
            },
            {
              key: "deactivate",
              value: function() {
                var e =
                  0 < arguments.length && void 0 !== arguments[0]
                    ? arguments[0]
                    : null;
                this.deactivate_(e);
              }
            },
            {
              key: "animateDeactivation_",
              value: function(e, t) {
                var n = t.wasActivatedByPointer,
                  a = t.wasElementMadeActive;
                (n || a) && this.runDeactivationUXLogicIfReady_();
              }
            },
            {
              key: "layout",
              value: function() {
                var e = this;
                this.layoutFrame_ && cancelAnimationFrame(this.layoutFrame_),
                  (this.layoutFrame_ = requestAnimationFrame(function() {
                    e.layoutInternal_(), (e.layoutFrame_ = 0);
                  }));
              }
            },
            {
              key: "layoutInternal_",
              value: function() {
                var e = this;
                this.frame_ = this.adapter_.computeBoundingRect();
                var t = Math.max(this.frame_.height, this.frame_.width);
                (this.maxRadius_ = this.adapter_.isUnbounded()
                  ? t
                  : Math.sqrt(
                      Math.pow(e.frame_.width, 2) + Math.pow(e.frame_.height, 2)
                    ) + v.numbers.PADDING),
                  (this.initialSize_ = t * v.numbers.INITIAL_ORIGIN_SCALE),
                  (this.fgScale_ = this.maxRadius_ / this.initialSize_),
                  this.updateLayoutCssVars_();
              }
            },
            {
              key: "updateLayoutCssVars_",
              value: function() {
                var e = v.strings,
                  t = e.VAR_FG_SIZE,
                  n = e.VAR_LEFT,
                  a = e.VAR_TOP,
                  r = e.VAR_FG_SCALE;
                this.adapter_.updateCssVariable(t, this.initialSize_ + "px"),
                  this.adapter_.updateCssVariable(r, this.fgScale_),
                  this.adapter_.isUnbounded() &&
                    ((this.unboundedCoords_ = {
                      left: Math.round(
                        this.frame_.width / 2 - this.initialSize_ / 2
                      ),
                      top: Math.round(
                        this.frame_.height / 2 - this.initialSize_ / 2
                      )
                    }),
                    this.adapter_.updateCssVariable(
                      n,
                      this.unboundedCoords_.left + "px"
                    ),
                    this.adapter_.updateCssVariable(
                      a,
                      this.unboundedCoords_.top + "px"
                    ));
              }
            },
            {
              key: "setUnbounded",
              value: function(e) {
                var t = v.cssClasses.UNBOUNDED;
                e ? this.adapter_.addClass(t) : this.adapter_.removeClass(t);
              }
            }
          ]),
          v
        );
      })();
    t.a = c;
  },
  function(e, t, n) {
    n.d(t, "a", function() {
      return a;
    }),
      n.d(t, "c", function() {
        return r;
      }),
      n.d(t, "b", function() {
        return i;
      });
    var a = {
        ROOT: "mdc-ripple-upgraded",
        UNBOUNDED: "mdc-ripple-upgraded--unbounded",
        BG_FOCUSED: "mdc-ripple-upgraded--background-focused",
        FG_ACTIVATION: "mdc-ripple-upgraded--foreground-activation",
        FG_DEACTIVATION: "mdc-ripple-upgraded--foreground-deactivation"
      },
      r = {
        VAR_LEFT: "--mdc-ripple-left",
        VAR_TOP: "--mdc-ripple-top",
        VAR_FG_SIZE: "--mdc-ripple-fg-size",
        VAR_FG_SCALE: "--mdc-ripple-fg-scale",
        VAR_FG_TRANSLATE_START: "--mdc-ripple-fg-translate-start",
        VAR_FG_TRANSLATE_END: "--mdc-ripple-fg-translate-end"
      },
      i = {
        PADDING: 10,
        INITIAL_ORIGIN_SCALE: 0.6,
        DEACTIVATION_TIMEOUT_MS: 225,
        FG_DEACTIVATION_MS: 150,
        TAP_DELAY_MS: 300
      };
  },
  function(e, t, n) {
    n.d(t, "a", function() {
      return i;
    });
    var a = n(2),
      r = n(9),
      o = n(1),
      i = (function(e) {
        function i() {
          var e;
          _classCallCheck(this, i);
          for (var t = arguments.length, n = Array(t), a = 0; a < t; a++)
            n[a] = arguments[a];
          var r = _possibleConstructorReturn(
            this,
            (e = i.__proto__ || Object.getPrototypeOf(i)).call.apply(
              e,
              [this].concat(n)
            )
          );
          return (r.ripple_ = r.initRipple_()), r;
        }
        return (
          _inherits(i, a["a"]),
          _createClass(i, null, [
            {
              key: "attachTo",
              value: function(e) {
                return new i(e);
              }
            }
          ]),
          _createClass(i, [
            {
              key: "initRipple_",
              value: function() {
                var e = new o.a(this.root_);
                return (e.unbounded = !0), e;
              }
            },
            {
              key: "destroy",
              value: function() {
                this.ripple_.destroy(),
                  _get(
                    i.prototype.__proto__ || Object.getPrototypeOf(i.prototype),
                    "destroy",
                    this
                  ).call(this);
              }
            },
            {
              key: "getDefaultFoundation",
              value: function() {
                var n = this;
                return new r.a({
                  addClass: function(e) {
                    return n.iconEl_.classList.add(e);
                  },
                  removeClass: function(e) {
                    return n.iconEl_.classList.remove(e);
                  },
                  registerInteractionHandler: function(e, t) {
                    return n.root_.addEventListener(e, t);
                  },
                  deregisterInteractionHandler: function(e, t) {
                    return n.root_.removeEventListener(e, t);
                  },
                  setText: function(e) {
                    return (n.iconEl_.textContent = e);
                  },
                  getTabIndex: function() {
                    return n.root_.tabIndex;
                  },
                  setTabIndex: function(e) {
                    return (n.root_.tabIndex = e);
                  },
                  getAttr: function(e, t) {
                    return n.root_.getAttribute(e, t);
                  },
                  setAttr: function(e, t) {
                    return n.root_.setAttribute(e, t);
                  },
                  removeAttr: function(e) {
                    return n.root_.removeAttribute(e);
                  },
                  notifyChange: function(e) {
                    return n.emit(r.a.strings.CHANGE_EVENT, e);
                  }
                });
              }
            },
            {
              key: "initialSyncWithDOM",
              value: function() {
                this.on =
                  "true" === this.root_.getAttribute(r.a.strings.ARIA_PRESSED);
              }
            },
            {
              key: "refreshToggleData",
              value: function() {
                this.foundation_.refreshToggleData();
              }
            },
            {
              key: "iconEl_",
              get: function() {
                var e = this.root_.dataset.iconInnerSelector;
                return e ? this.root_.querySelector(e) : this.root_;
              }
            },
            {
              key: "ripple",
              get: function() {
                return this.ripple_;
              }
            },
            {
              key: "on",
              get: function() {
                return this.foundation_.isOn();
              },
              set: function(e) {
                this.foundation_.toggle(e);
              }
            }
          ]),
          i
        );
      })();
  },
  function(e, t, n) {
    var a = n(0),
      r = (n(10), n(11)),
      i = (function(e) {
        function c(e) {
          _classCallCheck(this, c);
          var t = _possibleConstructorReturn(
            this,
            (c.__proto__ || Object.getPrototypeOf(c)).call(
              this,
              Object.assign(c.defaultAdapter, e)
            )
          );
          return (
            (t.on_ = !1),
            (t.disabled_ = !1),
            (t.savedTabIndex_ = -1),
            (t.toggleOnData_ = null),
            (t.toggleOffData_ = null),
            (t.clickHandler_ = function() {
              return t.toggleFromEvt_();
            }),
            t
          );
        }
        return (
          _inherits(c, a["a"]),
          _createClass(c, null, [
            {
              key: "cssClasses",
              get: function() {
                return r.a;
              }
            },
            {
              key: "strings",
              get: function() {
                return r.b;
              }
            },
            {
              key: "defaultAdapter",
              get: function() {
                return {
                  addClass: function() {},
                  removeClass: function() {},
                  registerInteractionHandler: function() {},
                  deregisterInteractionHandler: function() {},
                  setText: function() {},
                  getTabIndex: function() {
                    return 0;
                  },
                  setTabIndex: function() {},
                  getAttr: function() {
                    return "";
                  },
                  setAttr: function() {},
                  removeAttr: function() {},
                  notifyChange: function() {}
                };
              }
            }
          ]),
          _createClass(c, [
            {
              key: "init",
              value: function() {
                this.refreshToggleData(),
                  (this.savedTabIndex_ = this.adapter_.getTabIndex()),
                  this.adapter_.registerInteractionHandler(
                    "click",
                    this.clickHandler_
                  );
              }
            },
            {
              key: "destroy",
              value: function() {
                this.adapter_.deregisterInteractionHandler(
                  "click",
                  this.clickHandler_
                );
              }
            },
            {
              key: "refreshToggleData",
              value: function() {
                (this.toggleOnData_ = {
                  label: this.adapter_.getAttr(r.b.DATA_TOGGLE_ON_LABEL),
                  content: this.adapter_.getAttr(r.b.DATA_TOGGLE_ON_CONTENT),
                  cssClass: this.adapter_.getAttr(r.b.DATA_TOGGLE_ON_CLASS)
                }),
                  (this.toggleOffData_ = {
                    label: this.adapter_.getAttr(r.b.DATA_TOGGLE_OFF_LABEL),
                    content: this.adapter_.getAttr(r.b.DATA_TOGGLE_OFF_CONTENT),
                    cssClass: this.adapter_.getAttr(r.b.DATA_TOGGLE_OFF_CLASS)
                  });
              }
            },
            {
              key: "toggleFromEvt_",
              value: function() {
                this.toggle();
                var e = this.on_;
                this.adapter_.notifyChange({ isOn: e });
              }
            },
            {
              key: "isOn",
              value: function() {
                return this.on_;
              }
            },
            {
              key: "toggle",
              value: function() {
                var e =
                  0 < arguments.length && void 0 !== arguments[0]
                    ? arguments[0]
                    : !this.on_;
                this.on_ = e;
                var t = c.strings,
                  n = t.ARIA_LABEL,
                  a = t.ARIA_PRESSED;
                this.adapter_.setAttr(a, this.on_.toString());
                var r = (this.on_ ? this.toggleOffData_ : this.toggleOnData_)
                  .cssClass;
                r && this.adapter_.removeClass(r);
                var i = this.on_ ? this.toggleOnData_ : this.toggleOffData_,
                  o = i.content,
                  s = i.label,
                  u = i.cssClass;
                u && this.adapter_.addClass(u),
                  o && this.adapter_.setText(o),
                  s && this.adapter_.setAttr(n, s);
              }
            }
          ]),
          c
        );
      })();
    t.a = i;
  },
  function(e, t, n) {
    !(function() {
      function e() {
        _classCallCheck(this, e);
      }
      _createClass(e, [
        { key: "addClass", value: function(e) {} },
        { key: "removeClass", value: function(e) {} },
        { key: "registerInteractionHandler", value: function(e, t) {} },
        { key: "deregisterInteractionHandler", value: function(e, t) {} },
        { key: "setText", value: function(e) {} },
        { key: "getTabIndex", value: function() {} },
        { key: "setTabIndex", value: function(e) {} },
        { key: "getAttr", value: function(e) {} },
        { key: "setAttr", value: function(e, t) {} },
        { key: "removeAttr", value: function(e) {} },
        { key: "notifyChange", value: function(e) {} }
      ]);
    })();
  },
  function(e, t, n) {
    n.d(t, "a", function() {
      return a;
    }),
      n.d(t, "b", function() {
        return r;
      });
    var a = { ROOT: "mdc-icon-button" },
      r = {
        DATA_TOGGLE_ON_LABEL: "data-toggle-on-label",
        DATA_TOGGLE_ON_CONTENT: "data-toggle-on-content",
        DATA_TOGGLE_ON_CLASS: "data-toggle-on-class",
        DATA_TOGGLE_OFF_LABEL: "data-toggle-off-label",
        DATA_TOGGLE_OFF_CONTENT: "data-toggle-off-content",
        DATA_TOGGLE_OFF_CLASS: "data-toggle-off-class",
        ARIA_PRESSED: "aria-pressed",
        ARIA_LABEL: "aria-label",
        CHANGE_EVENT: "MDCIconButtonToggle:change"
      };
  }
]);
//# sourceMappingURL=resto-bundle.min.js.map
