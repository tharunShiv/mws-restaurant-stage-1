"use strict";
var _createClass = (function() {
  function n(e, t) {
    for (var a = 0; a < t.length; a++) {
      var n = t[a];
      (n.enumerable = n.enumerable || !1),
        (n.configurable = !0),
        "value" in n && (n.writable = !0),
        Object.defineProperty(e, n.key, n);
    }
  }
  return function(e, t, a) {
    return t && n(e.prototype, t), a && n(e, a), e;
  };
})();
function _classCallCheck(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
var offlineMessage = document.getElementById("offline"),
  noDataMessage = document.getElementById("no-data"),
  dataSavedMessage = document.getElementById("data-saved"),
  saveErrorMessage = document.getElementById("save-error"),
  DBHelper = (function() {
    function a() {
      _classCallCheck(this, a);
    }
    return (
      _createClass(a, null, [
        {
          key: "getAlternativeText",
          value: function(e) {
            return {
              1: "Interior of Mission Chinese Food",
              2: "Pizza Quattro Formaggi",
              3: "Interior of Kang Ho Dong Baekjeong",
              4: "Outside view of Katz's Delicatessen at night",
              5: "Open kitchen of Roberta's Pizza",
              6: "People queueing at Hometown BBQ",
              7: "Outside view of Superiority Burger",
              8: "Outside view of The Dutch",
              9: "People eating at Mu Ramen",
              10: "Interior of Casa Enrique"
            }[e];
          }
        },
        {
          key: "messageOffline",
          value: function() {
            var e = this.getLastUpdated();
            e &&
              (offlineMessage.textContent += " Last fetched server data: " + e),
              (offlineMessage.style.display = "block");
          }
        },
        {
          key: "messageNoData",
          value: function() {
            noDataMessage.style.display = "block";
          }
        },
        {
          key: "messageDataSaved",
          value: function() {
            var e = this.getLastUpdated();
            e && (dataSavedMessage.textContent += " on " + e),
              (dataSavedMessage.style.display = "block");
          }
        },
        {
          key: "messageSaveError",
          value: function() {
            saveErrorMessage.style.display = "block";
          }
        },
        {
          key: "getLastUpdated",
          value: function() {
            return localStorage.getItem("lastUpdated");
          }
        },
        {
          key: "setLastUpdated",
          value: function(e) {
            localStorage.setItem("lastUpdated", e);
          }
        },
        {
          key: "logResult",
          value: function(e) {
            console.log(e);
          }
        },
        {
          key: "logError",
          value: function(e) {
            console.log("[ERROR] Looks like there was a problem: \n", e);
          }
        },
        {
          key: "validateResponse",
          value: function(e) {
            if (!e.ok) throw Error(e.statusText);
            return e;
          }
        },
        {
          key: "readResponseAsJSON",
          value: function(e) {
            return e.json();
          }
        },
        {
          key: "readResponseAsText",
          value: function(e) {
            return e.text();
          }
        },
        {
          key: "getServerData",
          value: function(e) {
            return fetch(e)
              .then(this.validateResponse)
              .then(this.readResponseAsJSON);
          }
        },
        {
          key: "postRequest",
          value: function(e, t) {
            var a = new Headers({ "Content-Type": "application/json" }),
              n = JSON.stringify(t);
            return fetch(e, { method: "POST", headers: a, body: n })
              .then(this.validateResponse)
              .then(this.readResponseAsText);
          }
        },
        {
          key: "getRestaurantURL",
          value: function(e) {
            return "restaurant.html?id=" + e.id;
          }
        },
        {
          key: "getImageUrlForRestaurant",
          value: function(e, t, a) {
            var n = "jpg";
            switch (t) {
              case "jpeg":
                break;
              case "webp":
                n = "webp";
                break;
              default:
                console.log("[DEBUG] unhandled imageType: " + t);
            }
            return void 0 !== a
              ? "img/" + e.id + "_w_" + a + "." + n
              : "img/" + e.id + "_w_800." + n;
          }
        },
        {
          key: "addMarkerForRestaurant",
          value: function(e, t) {
            return new google.maps.Marker({
              position: e.latlng,
              title: e.name,
              url: a.getRestaurantURL(e),
              map: t,
              animation: google.maps.Animation.DROP
            });
          }
        },
        {
          key: "DATABASE_URL",
          get: function() {
            return "http://localhost:1337";
          }
        }
      ]),
      a
    );
  })(),
  map = void 0,
  neighborhoods = void 0,
  cuisines = void 0,
  restaurants = void 0,
  markers = [],
  endpointRestaurants = "http://localhost:1337/restaurants",
  elementMapsContainer = document.getElementById("maps-container"),
  elementGoogleMaps = document.getElementById("google-maps"),
  elementGoogleStaticMaps = document.getElementById("google-static-maps"),
  elementNeighborhoodsSelect = document.getElementById("neighborhoods-select"),
  elementCuisinesSelect = document.getElementById("cuisines-select"),
  elementRestaurantsList = document.getElementById("restaurants-list");
document.addEventListener("DOMContentLoaded", function(e) {
  createMapsStatic(), loadMainNetworkFirst();
});
var createMapsStatic = function() {
    var e = "",
      t = 640,
      a = 640,
      n = 1,
      r = new Image();
    (r.id = "static-map"),
      (r.className = "google-maps-static-img"),
      r.setAttribute("onclick", "showGoogleMaps()"),
      (r.alt =
        "Static map showing high level view of New York, Manhattan and Brooklyn");
    var s = elementMapsContainer.clientWidth;
    s <= 640 ? (t = s) : ((n = 2), (t = 640));
    var o = elementMapsContainer.clientHeight;
    o <= 640 ? (a = o) : ((n = 2), (a = 640)),
      (e = "img/staticmap.jpg"),
      (r.src = e),
      (r.width = t),
      (r.height = a),
      elementGoogleStaticMaps.appendChild(r);
  },
  showGoogleMaps = function() {
    "none" === elementGoogleMaps.style.display &&
      ((elementGoogleMaps.style.display = "block"),
      (elementGoogleStaticMaps.style.display = "none"));
  },
  loadMainNetworkFirst = function() {
    DBHelper.getServerData(endpointRestaurants)
      .then(function(e) {
        updateNeighborhoodsUI(e),
          updateCuisinesUI(e),
          saveRestaurantsDataLocally(e)
            .then(function() {
              DBHelper.setLastUpdated(new Date());
            })
            .catch(function(e) {
              console.warn(e);
            });
      })
      .catch(function(e) {
        console.log(
          "[DEBUG] Network requests have failed, this is expected if offline"
        ),
          getLocalRestaurantsData().then(function(e) {
            e.length &&
              (updateNeighborhoodsUI(e),
              updateCuisinesUI(e),
              refreshRestaurantsNetworkFirst());
          });
      });
  },
  updateNeighborhoodsUI = function(a) {
    var n = a.map(function(e, t) {
      return a[t].neighborhood;
    });
    (self.neighborhoods = n.filter(function(e, t) {
      return n.indexOf(e) == t;
    })),
      neighborhoods.forEach(function(e) {
        var t = document.createElement("option");
        (t.innerHTML = e),
          (t.value = e),
          elementNeighborhoodsSelect.appendChild(t);
      });
  },
  updateCuisinesUI = function(a) {
    var n = a.map(function(e, t) {
      return a[t].cuisine_type;
    });
    (self.cuisines = n.filter(function(e, t) {
      return n.indexOf(e) == t;
    })),
      cuisines.forEach(function(e) {
        var t = document.createElement("option");
        (t.innerHTML = e), (t.value = e), elementCuisinesSelect.appendChild(t);
      });
  },
  refreshRestaurantsNetworkFirst = function() {
    DBHelper.getServerData(endpointRestaurants)
      .then(function(e) {
        refreshRestaurantsUI(!1, e),
          saveRestaurantsDataLocally(e)
            .then(function() {
              DBHelper.setLastUpdated(new Date());
            })
            .catch(function(e) {
              console.warn(e);
            });
      })
      .catch(function(e) {
        console.log(
          "[DEBUG] Network requests have failed, this is expected if offline"
        ),
          getLocalRestaurantsData().then(function(e) {
            e.length && refreshRestaurantsUI(!0, e);
          });
      });
  },
  refreshRestaurantsUI = function(e, t) {
    var a = elementNeighborhoodsSelect.selectedIndex,
      n = elementCuisinesSelect.selectedIndex,
      r = elementNeighborhoodsSelect[a].value,
      s = elementCuisinesSelect[n].value;
    (self.restaurants = []),
      (elementRestaurantsList.innerHTML = ""),
      markers.forEach(function(e) {
        return e.setMap(null);
      }),
      (markers = []),
      (self.restaurants = t),
      "all" != r &&
        (self.restaurants = self.restaurants.filter(function(e) {
          return e.neighborhood == r;
        })),
      "all" != s &&
        (self.restaurants = self.restaurants.filter(function(e) {
          return e.cuisine_type == s;
        })),
      self.restaurants.forEach(function(e) {
        elementRestaurantsList.appendChild(addRestaurantCardUI(e));
      }),
      e || addMarkersToMapUI();
  },
  addRestaurantCardUI = function(e) {
    var t = document.createElement("li");
    (t.className = "restaurant-card"),
      t.appendChild(createResponsivePicture(e));
    var a = document.createElement("div");
    a.className = "card-primary";
    var n = document.createElement("h2");
    (n.className = "card-title"), (n.innerHTML = e.name), a.appendChild(n);
    var r = document.createElement("h3");
    (r.className = "card-subtitle"),
      (r.innerHTML = e.neighborhood),
      a.appendChild(r),
      t.appendChild(a);
    var s = document.createElement("div");
    s.className = "card-secondary";
    var o = document.createElement("address");
    (o.className = "card-secondary-content"),
      (o.innerHTML = e.address),
      s.appendChild(o),
      t.appendChild(s);
    var i = document.createElement("div");
    i.className = "card-actions";
    var l = document.createElement("a");
    return (
      (l.className = "card-actions-link"),
      (l.innerHTML = "View Details"),
      (l.href = DBHelper.getRestaurantURL(e)),
      i.appendChild(l),
      t.appendChild(i),
      t
    );
  },
  createResponsivePicture = function(e) {
    var t = document.createElement("picture"),
      a =
        "(min-width: 80rem) 22.5vw, (min-width: 60rem) 30vw, (min-width: 37.5rem) 45vw, 100vw",
      n =
        DBHelper.getImageUrlForRestaurant(e, "webp", 300) +
        " 300w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "webp", 433) +
        " 433w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "webp", 552) +
        " 552w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "webp", 653) +
        " 653w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "webp", 752) +
        " 752w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "webp", 800) +
        " 800w",
      r =
        DBHelper.getImageUrlForRestaurant(e, "jpeg", 300) +
        " 300w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "jpeg", 433) +
        " 433w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "jpeg", 552) +
        " 552w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "jpeg", 653) +
        " 653w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "jpeg", 752) +
        " 752w,\n    " +
        DBHelper.getImageUrlForRestaurant(e, "jpeg", 800) +
        " 800w",
      s = document.createElement("source");
    (s.srcset = n), (s.sizes = a), (s.type = "image/webp"), t.appendChild(s);
    var o = document.createElement("source");
    (o.srcset = r), (o.sizes = a), (o.type = "image/jpeg"), t.appendChild(o);
    var i = document.createElement("img"),
      l = DBHelper.getImageUrlForRestaurant(e, "jpeg", 800);
    i.src = l;
    var u = DBHelper.getAlternativeText(e.id);
    return u || (u = "Restaurant " + e.name), (i.alt = u), t.appendChild(i), t;
  };
window.initMap = function() {
  (map = new google.maps.Map(elementGoogleMaps, {
    center: { lat: 40.722216, lng: -73.987501 },
    zoom: 12
  })).addListener("tilesloaded", function() {
    document
      .querySelector("#google-maps iframe")
      .setAttribute("title", "Google Maps overview of restaurants");
  }),
    refreshRestaurantsNetworkFirst();
};
var addMarkersToMapUI = function() {
  (0 < arguments.length && void 0 !== arguments[0]
    ? arguments[0]
    : self.restaurants
  ).forEach(function(e) {
    var t = DBHelper.addMarkerForRestaurant(e, self.map);
    google.maps.event.addListener(t, "click", function() {
      window.location.href = t.url;
    }),
      markers.push(t);
  });
};
//# sourceMappingURL=main-bundle.min.js.map
